---

- name: Ensure the users are removed
  community.rabbitmq.rabbitmq_user:
    user: "{{ item }}"
    state: absent
  loop: "{{ rabbitmq_users_removed }}"

- name: Ensure the vhosts are present
  community.rabbitmq.rabbitmq_vhost:
    name: "{{ item }}"
    state: present
  loop: "{{ rabbitmq_vhosts }}"

- name: Ensure the users are present
  community.rabbitmq.rabbitmq_user:
    user: "{{ item.user }}"
    password: "{{ item.password }}"
    configure_priv: "{{ item.configure_priv | default('.*') }}"
    read_priv: "{{ item.read_priv | default('.*') }}"
    write_priv: "{{ item.write_priv | default('.*') }}"
    vhost: "{{ item.vhost | default('/') }}"
    permissions: {{ item.permissions | default(omit) }}
    tags: "{{ item.tags | default('') }}"
  no_log: true
  loop: "{{ rabbitmq_users | flatten(levels=1) }}"

- name: Create rabbitmq queues
  community.rabbitmq.rabbitmq_queue:
    name: "{{ item.name }}"
    login_user: "{{ item.user }}"
    login_password: "{{ item.password }}"
    vhost: "{{ item.vhost }}"
    durable: "{{ item.durable | default('yes') }}"
    state: present
  loop: "{{ rabbitmq_vhosts_queues | flatten(levels=1) }}"
  when: rabbitmq_hosts_queues | length>0

- name: Set rabbitmq parameter
  community.rabbitmq.rabbitmq_parameter:
    component: "{{ item.component }}"
    name: "{{ item.username }}"
    value: "{{ item.parameter }}"
    vhost: "{{ item.vhost | default(omit) }}"
    state: present
  loop: "{{ rabbitmq_parameter | flatten(levels=1) }}"
  when: rabbitmq_parameter | length>0
